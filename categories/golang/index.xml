<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Minicloudsky&#39;s blog</title>
    <link>https://minicloudsky.cn/categories/golang/</link>
    <description>Recent content in Golang on Minicloudsky&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Dec 2024 20:53:21 +0000</lastBuildDate>
    <atom:link href="https://minicloudsky.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入解析Golang异常机制：Panic 与 Recover</title>
      <link>https://minicloudsky.cn/blog/2024/12/28/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90golang%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6panic-%E4%B8%8E-recover/</link>
      <pubDate>Sat, 28 Dec 2024 20:53:21 +0000</pubDate>
      <guid>https://minicloudsky.cn/blog/2024/12/28/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90golang%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6panic-%E4%B8%8E-recover/</guid>
      <description>&lt;h1 id=&#34;一前言&#34;&gt;一、前言&lt;/h1&gt;&#xA;&lt;p&gt;在 Go 中，&lt;code&gt;panic&lt;/code&gt; 是一种用于处理异常的机制。&lt;code&gt;panic&lt;/code&gt; 能够改变程序的控制流，调用 &lt;code&gt;panic&lt;/code&gt; 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用方的 &lt;code&gt;defer&lt;/code&gt;；当程序遇到不可恢复的错误或异常状态时，可以通过调用 &lt;code&gt;panic&lt;/code&gt; 来中止当前函数的执行，触发递归的函数栈退出，最终程序崩溃并打印错误信息。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
